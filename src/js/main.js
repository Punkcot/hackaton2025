/**
 * @file: main.js
 * @description: –û—Å–Ω–æ–≤–Ω–æ–π JavaScript —Ñ–∞–π–ª –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Æ–¢—ç–π—Ä —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∫–∞—Ä—Ç—ã
 * @dependencies: –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã API 2.1
 * @created: 2025-09-16
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const CONFIG = {
    map: {
        center: [58.0, 65.0], // –¶–µ–Ω—Ç—Ä –†–æ—Å—Å–∏–∏ (–º–µ–∂–¥—É –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ö–∞–±–∞–º–∏) [—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞]
        zoom: 5,
        minZoom: 3,
        maxZoom: 18
    },
    // –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π —Å–µ—Ç–∏ –Æ–¢—ç–π—Ä –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ JSON
    cities: {},
    routes: [],
    mainHubs: ['–°–£–†', '–ú–û–í', '–£–§–ê'] // –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞–±—ã –Æ–¢—ç–π—Ä
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let yandexMap;
let routeLines = [];
let allRouteLines = []; // –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
let markers = [];
let objectManager;
let selectedCity = null; // –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
let selectedWeekdays = []; // –í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Æ–¢—ç–π—Ä');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã API
    ymaps.ready(function() {
        console.log('üó∫Ô∏è –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã API –∑–∞–≥—Ä—É–∂–µ–Ω');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (typeof UTAIR_DATA_EXTENDED !== 'undefined') {
            console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–≤—Å–µ –≥–æ—Ä–æ–¥–∞)');
            loadExtendedData();
        } else if (typeof UTAIR_DATA !== 'undefined') {
            console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤');
            loadEmbeddedData();
        } else {
            console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞');
            loadRouteData().catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            });
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
        setTimeout(() => {
            initializeMap();
            bindEventListeners();
            console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
        }, 100);
    });
});

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π —Å–µ—Ç–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞
 */
async function loadRouteData() {
    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π —Å–µ—Ç–∏...');
    
    try {
        const response = await fetch('utair_routes.json');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
        const data = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        CONFIG.cities = data.cities;
        CONFIG.routes = data.routes;
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.routes.length} –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è ${Object.keys(data.cities).length} –≥–æ—Ä–æ–¥–æ–≤`);
        console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤ - ${data.routes.reduce((sum, route) => sum + route.flights, 0)}`);
        console.log('üèôÔ∏è –ì–æ—Ä–æ–¥–∞:', Object.keys(data.cities));
        console.log('üõ´ –ü–µ—Ä–≤—ã–µ 3 –º–∞—Ä—à—Ä—É—Ç–∞:', data.routes.slice(0, 3));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        updateStatistics(data);
        
        return data;
        } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
        }
    }

    /**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π —Å–µ—Ç–∏
 */
function loadEmbeddedData() {
    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π —Å–µ—Ç–∏...');
    
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        CONFIG.cities = UTAIR_DATA.cities;
        CONFIG.routes = UTAIR_DATA.routes;
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${UTAIR_DATA.routes.length} –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è ${Object.keys(UTAIR_DATA.cities).length} –≥–æ—Ä–æ–¥–æ–≤`);
        console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤ - ${UTAIR_DATA.routes.reduce((sum, route) => sum + route.flights, 0)}`);
        console.log('üèôÔ∏è –ì–æ—Ä–æ–¥–∞:', Object.keys(UTAIR_DATA.cities));
        console.log('üõ´ –ü–µ—Ä–≤—ã–µ 3 –º–∞—Ä—à—Ä—É—Ç–∞:', UTAIR_DATA.routes.slice(0, 3));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        updateStatistics(UTAIR_DATA);
        
        console.log('‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π —Å–µ—Ç–∏ (–≤—Å–µ –≥–æ—Ä–æ–¥–∞)
 */
function loadExtendedData() {
    console.log('üåç –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π —Å–µ—Ç–∏...');
    
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        CONFIG.cities = UTAIR_DATA_EXTENDED.cities;
        CONFIG.routes = UTAIR_DATA_EXTENDED.routes;
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${UTAIR_DATA_EXTENDED.routes.length} –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è ${Object.keys(UTAIR_DATA_EXTENDED.cities).length} –≥–æ—Ä–æ–¥–æ–≤`);
        console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤ - ${UTAIR_DATA_EXTENDED.routes.reduce((sum, route) => sum + route.flights, 0)}`);
        console.log('üèôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞–±—ã:', UTAIR_DATA_EXTENDED.stats.main_hubs);
        console.log('üåê –ì–µ–æ–≥—Ä–∞—Ñ–∏—è: –æ—Ç –†–æ—Å—Å–∏–∏ –¥–æ –¢—É—Ä—Ü–∏–∏ –∏ –û–ê–≠');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        updateStatistics(UTAIR_DATA_EXTENDED);
        
        console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
 */
function initializeMap() {
    console.log('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã...');
    
    try {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        yandexMap = new ymaps.Map('mapContainer', {
            center: CONFIG.map.center,
            zoom: CONFIG.map.zoom,
            controls: ['zoomControl', 'typeSelector', 'fullscreenControl']
        }, {
            minZoom: CONFIG.map.minZoom,
            maxZoom: CONFIG.map.maxZoom
        });

        // –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
        objectManager = new ymaps.ObjectManager({
            clusterize: true,
            gridSize: 64,
            clusterDisableClickZoom: false
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
        yandexMap.geoObjects.add(objectManager);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
        addAirportMarkers();
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        addRoutes();

        console.log('‚úÖ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
        }
    }

    /**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
 */
function addAirportMarkers() {
    console.log('‚úàÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤...');
    
    if (Object.keys(CONFIG.cities).length === 0) {
        console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–∞—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤');
        return;
    }
    
    console.log(`üèôÔ∏è –ù–∞–π–¥–µ–Ω–æ ${Object.keys(CONFIG.cities).length} –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è`);

    // –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    const cityStats = {};
    CONFIG.routes.forEach(route => {
        const fromCity = findCityByCoords(route.from);
        const toCity = findCityByCoords(route.to);
        
        if (fromCity) {
            cityStats[fromCity.code] = (cityStats[fromCity.code] || 0) + route.flights;
        }
        if (toCity) {
            cityStats[toCity.code] = (cityStats[toCity.code] || 0) + route.flights;
        }
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
    const features = [];

    // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    Object.entries(CONFIG.cities).forEach(([cityCode, cityData], index) => {
        const isHub = CONFIG.mainHubs.includes(cityCode);
        const flightCount = cityStats[cityCode] || 0;
        const isTyumen = cityCode === '–¢–Æ–ú'; // –û—Å–æ–±–∞—è –º–µ—Ç–∫–∞ –¥–ª—è –¢—é–º–µ–Ω–∏
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞
        const feature = {
            type: 'Feature',
            id: index,
            geometry: {
                type: 'Point',
                coordinates: [cityData.coords[0], cityData.coords[1]] // –Ø–Ω–¥–µ–∫—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç [—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞]
            },
            properties: {
                clusterCaption: cityData.name,
                hintContent: `${cityData.name}<br>${isTyumen ? '–ì–ª–∞–≤–Ω—ã–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ö–∞–±' : isHub ? '–û—Å–Ω–æ–≤–Ω–æ–π —Ö–∞–±' : '–ê—ç—Ä–æ–ø–æ—Ä—Ç'} –Æ–¢—ç–π—Ä<br>–ö–æ–¥: ${cityCode}<br>–†–µ–π—Å–æ–≤: ${flightCount}<br>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${cityData.coords[0].toFixed(4)}, ${cityData.coords[1].toFixed(4)}`,
                iconContent: isTyumen ? 'üèôÔ∏è' : isHub ? 'üè¢' : '‚úàÔ∏è'
            },
            options: {
                preset: isTyumen ? 'islands#redCircleIcon' : 'islands#blueIcon',
                iconColor: isTyumen ? '#004499' : isHub ? '#004499' : '#0066CC',
                iconImageSize: isTyumen ? [60, 60] : [30, 30] // –í 2 —Ä–∞–∑–∞ –∫—Ä—É–ø–Ω–µ–µ –¥–ª—è –¢—é–º–µ–Ω–∏
            }
        };
        
        features.push(feature);
        markers.push(feature);
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±—ä–µ–∫—Ç–æ–≤
    const collection = {
        type: 'FeatureCollection',
        features: features
    };
    
    console.log('üìç –î–æ–±–∞–≤–ª—è–µ–º—ã–µ –º–∞—Ä–∫–µ—Ä—ã:', collection);
    objectManager.add(collection);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º –≥–æ—Ä–æ–¥–æ–≤
    objectManager.events.add('click', function(e) {
        const objectId = e.get('objectId');
        const feature = features.find(f => f.id === objectId);
        
        if (feature) {
            const cityCode = Object.keys(CONFIG.cities)[objectId];
            const cityName = feature.properties.clusterCaption;
            
            console.log(`üèôÔ∏è –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: ${cityName} (${cityCode})`);
            filterRoutesByCity(cityCode, cityName);
        }
    });

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${Object.keys(CONFIG.cities).length} –º–∞—Ä–∫–µ—Ä–æ–≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤`);
}

/**
 * –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
 */
function findCityByCoords(coords) {
    for (const [code, cityData] of Object.entries(CONFIG.cities)) {
        if (Math.abs(cityData.coords[0] - coords[0]) < 0.01 && 
            Math.abs(cityData.coords[1] - coords[1]) < 0.01) {
            return { code, ...cityData };
        }
    }
    return null;
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
 */
function addRoutes() {
    console.log('üõ´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
    
    if (CONFIG.routes.length === 0) {
        console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤');
        return;
    }
    
    console.log(`üó∫Ô∏è –ù–∞–π–¥–µ–Ω–æ ${CONFIG.routes.length} –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ–π—Å–æ–≤ (—Å–∞–º—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ - —Ç–æ–ª—â–µ)
    const sortedRoutes = [...CONFIG.routes].sort((a, b) => b.flights - a.flights);
    
    sortedRoutes.forEach((route, index) => {
        // –î–µ–ª–∞–µ–º –ª–∏–Ω–∏–∏ —Ç–æ–Ω–∫–∏–º–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–º–∏
        const weight = 2; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ–Ω–∫–∞—è —Ç–æ–ª—â–∏–Ω–∞
        const opacity = 0.8; // –í—ã—Å–æ–∫–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
        
        // –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        const color = route.flights > 30 ? '#000080' : // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
                     route.flights > 15 ? '#0066CC' : // –°–∏–Ω–∏–π –Æ–¢—ç–π—Ä
                     '#1E90FF'; // –Ø—Ä–∫–æ-—Å–∏–Ω–∏–π
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        const pathCoords = [
            [route.from[0], route.from[1]],  // –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
            [route.to[0], route.to[1]]       // –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
        ];
        
        const routeLine = new ymaps.Polyline(pathCoords, {
            balloonContentHeader: route.name,
            balloonContentBody: `<strong>–†–µ–π—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é: ${route.flights}</strong>`,
            balloonContentFooter: `–ö–æ–¥ –º–∞—Ä—à—Ä—É—Ç–∞: ${route.code}<br>–ú–∞—Ä—à—Ä—É—Ç #${index + 1} –∏–∑ ${sortedRoutes.length}`,
            hintContent: route.name
        }, {
            strokeColor: color,
            strokeWidth: weight,
            strokeOpacity: opacity,
            strokeStyle: route.flights > 20 ? 'solid' : 'dash' // –°–ø–ª–æ—à–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        routeLine.routeData = {
            from_code: route.from_code || route.code?.split('-')[0],
            to_code: route.to_code || route.code?.split('-')[1],
            route: route
        };

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É
        console.log(`üõ´ –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç: ${route.name}`, routeLine);
        yandexMap.geoObjects.add(routeLine);
        routeLines.push(routeLine);
        allRouteLines.push(routeLine); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
    });

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${CONFIG.routes.length} –º–∞—Ä—à—Ä—É—Ç–æ–≤`);
    console.log(`üìä –°–∞–º—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π: ${sortedRoutes[0]?.name} (${sortedRoutes[0]?.flights} —Ä–µ–π—Å–æ–≤)`);
}

/**
 * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
 */
function filterRoutesByCity(cityCode, cityName) {
    console.log(`üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞: ${cityName} (${cityCode})`);
    
    if (selectedCity === cityCode) {
        // –ï—Å–ª–∏ —Ç–æ—Ç –∂–µ –≥–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
        selectedCity = null;
        console.log('üåê –°–±—Ä–æ—à–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É');
    } else {
        selectedCity = cityCode;
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
    applyFilters();
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ
 */
function showAllRoutesOnMap() {
    allRouteLines.forEach(routeLine => {
        yandexMap.geoObjects.add(routeLine);
    });
    selectedCity = null;
    selectedWeekdays = [];
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    document.querySelectorAll('.btn-weekday').forEach(btn => {
        btn.classList.remove('active');
    });
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
 */
function toggleWeekdayFilter(day, button) {
    const dayIndex = selectedWeekdays.indexOf(day);
    
    if (dayIndex > -1) {
        // –£–±–∏—Ä–∞–µ–º –¥–µ–Ω—å –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
        selectedWeekdays.splice(dayIndex, 1);
        button.classList.remove('active');
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –≤ —Ñ–∏–ª—å—Ç—Ä
        selectedWeekdays.push(day);
        button.classList.add('active');
    }
    
    console.log(`üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–Ω—è–º: ${selectedWeekdays.join(', ')}`);
    applyFilters();
}

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
 */
function applyFilters() {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
    allRouteLines.forEach(routeLine => {
        yandexMap.geoObjects.remove(routeLine);
    });
    
    let filteredCount = 0;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
    allRouteLines.forEach(routeLine => {
        const routeData = routeLine.routeData;
        let showRoute = true;
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
        if (selectedCity && routeData) {
            if (routeData.from_code !== selectedCity && routeData.to_code !== selectedCity) {
                showRoute = false;
            }
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª–µ—Ç–æ–≤)
        if (selectedWeekdays.length > 0 && routeData && routeData.route) {
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (–≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∞ –±—ã —á–∞—Å—Ç–æ—Ç–∞ @freq)
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ä–µ–π—Å—ã —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–µ—Ç–∞—é—Ç —á–∞—â–µ
            const flightFreq = routeData.route.flights || 0;
            
            // –í—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–µ —Ä–µ–π—Å—ã (>20) - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ (1-7)
            // –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Å—ã (10-20) - —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (1-5) 
            // –†–µ–¥–∫–∏–µ —Ä–µ–π—Å—ã (<10) - –≤—ã—Ö–æ–¥–Ω—ã–µ (6-7)
            let routeWeekdays = [];
            if (flightFreq > 20) {
                routeWeekdays = [1, 2, 3, 4, 5, 6, 7]; // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ
            } else if (flightFreq > 10) {
                routeWeekdays = [1, 2, 3, 4, 5]; // –†–∞–±–æ—á–∏–µ –¥–Ω–∏
            } else {
                routeWeekdays = [6, 7]; // –í—ã—Ö–æ–¥–Ω—ã–µ
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π —Å –¥–Ω—è–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞
            const hasMatchingDay = selectedWeekdays.some(day => routeWeekdays.includes(day));
            if (!hasMatchingDay) {
                showRoute = false;
            }
        }
        
        if (showRoute) {
            yandexMap.geoObjects.add(routeLine);
            filteredCount++;
        }
    });
    
    console.log(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: –ø–æ–∫–∞–∑–∞–Ω–æ ${filteredCount} –º–∞—Ä—à—Ä—É—Ç–æ–≤`);
}

/**
 * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function bindEventListeners() {
    console.log('üîó –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
    
    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã"
    const showAllRoutesBtn = document.getElementById('showAllRoutes');
    if (showAllRoutesBtn) {
        showAllRoutesBtn.addEventListener('click', showAllRoutes);
    }

    // –ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å–∏—Ç—å –≤–∏–¥"
    const resetViewBtn = document.getElementById('resetView');
    if (resetViewBtn) {
        resetViewBtn.addEventListener('click', resetMapView);
    }
    
    // –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    const weekdayButtons = document.querySelectorAll('.btn-weekday');
    weekdayButtons.forEach(button => {
        button.addEventListener('click', function() {
            const day = parseInt(this.dataset.day);
            toggleWeekdayFilter(day, this);
        });
    });

    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã (–ø–æ–¥–æ–≥–Ω–∞—Ç—å –∫–∞—Ä—Ç—É –ø–æ–¥ –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã)
 */
function showAllRoutes() {
    console.log('üîç –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
    
    if (markers.length > 0) {
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
        const bounds = [];
        markers.forEach(marker => {
            if (marker.geometry && marker.geometry.coordinates) {
                bounds.push(marker.geometry.coordinates);
            }
        });
        
        if (bounds.length > 0) {
            yandexMap.setBounds(yandexMap.geoObjects.getBounds(), {
                checkZoomRange: true,
                zoomMargin: 50
            });
            console.log('‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–¥–æ–≥–Ω–∞–Ω–∞ –ø–æ–¥ –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã');
        }
        }
    }

    /**
 * –°–±—Ä–æ—Å –≤–∏–¥–∞ –∫–∞—Ä—Ç—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
 */
function resetMapView() {
    console.log('üîÑ –°–±—Ä–æ—Å –≤–∏–¥–∞ –∫–∞—Ä—Ç—ã...');
    
    yandexMap.setCenter(CONFIG.map.center, CONFIG.map.zoom);
    
    // –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏ —Å–±—Ä–æ—Å–µ
    showAllRoutesOnMap();
    
    console.log('‚úÖ –í–∏–¥ –∫–∞—Ä—Ç—ã —Å–±—Ä–æ—à–µ–Ω, –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã');
}

/**
 * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
 */
function showErrorMessage(message) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', message);
    
    const mapContainer = document.getElementById('mapContainer');
    if (mapContainer) {
        mapContainer.innerHTML = `
            <div style="
                display: flex;
                align-items: center;
                justify-content: center;
                height: 100%;
                background-color: #f5f5f5;
                color: #666;
                text-align: center;
                font-family: Inter, sans-serif;
            ">
                <div>
                    <h3 style="color: #0066CC; margin-bottom: 15px;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã</h3>
                    <p>${message}</p>
                    <button onclick="location.reload()" style="
                        margin-top: 15px;
                        padding: 10px 20px;
                        background-color: #0066CC;
            color: white;
                        border: none;
                        border-radius: 5px;
                        cursor: pointer;
                    ">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
                </div>
            </div>
        `;
    }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
     */
window.addEventListener('resize', function() {
    if (yandexMap) {
        setTimeout(() => {
            yandexMap.container.fitToViewport();
            console.log('üîÑ –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω');
        }, 100);
    }
});

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */
function updateStatistics(data) {
    console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
    
    const routeCount = document.getElementById('routeCount');
    const cityCount = document.getElementById('cityCount');
    const flightCount = document.getElementById('flightCount');
    
    if (routeCount) {
        routeCount.textContent = data.routes.length;
    }
    
    if (cityCount) {
        cityCount.textContent = Object.keys(data.cities).length;
    }
    
    if (flightCount) {
        const totalFlights = data.routes.reduce((sum, route) => sum + route.flights, 0);
        flightCount.textContent = totalFlights;
    }
    
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
window.UtairApp = {
    showAllRoutes,
    resetMapView,
    updateStatistics,
    map: () => yandexMap,
    config: () => CONFIG
};
